import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import Header from "../../components/Header/Header";
import Main from "../../components/Main/Main";
import StatsDashboard from "../../components/StatsDashboard/StatsDashboard";
import PopNewCard from "../../components/popups/PopNewCard/PopNewCard";
import PopBrowse from "../../components/popups/PopBrowse/PopBrowse";
import PopUser from "../../components/popups/PopUser/PopUser";
import { Wrapper, Container } from "../../App.styled";
import {
  ExitContainer,
  ExitModal,
  ExitBlock,
  ExitTitle,
  ExitText,
  ExitButtons,
  ExitButtonYes,
  ExitButtonNo,
} from "../ExitPage/ExitPage.styled";
import { StatsToggleButton, StatsSection } from "./MainPage.styled";

function MainPage() {
  const { logout } = useAuth();
  const [showExitModal, setShowExitModal] = useState(false);
  const [showNewCardModal, setShowNewCardModal] = useState(false);
  const [showBrowseModal, setShowBrowseModal] = useState(false);
  const [selectedCard, setSelectedCard] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedFilter, setSelectedFilter] = useState("");
  const [selectedSort, setSelectedSort] = useState("");

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const [showStats, setShowStats] = useState(() => {
    const savedState = localStorage.getItem("showStats");
    return savedState ? JSON.parse(savedState) : true;
  });

  const navigate = useNavigate();

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage
  useEffect(() => {
    localStorage.setItem("showStats", JSON.stringify(showStats));
  }, [showStats]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
  useEffect(() => {
    const handleEscapeKey = (e) => {
      if (e.key === "Escape") {
        if (showExitModal) {
          setShowExitModal(false);
        }
        if (showNewCardModal) {
          setShowNewCardModal(false);
        }
        if (showBrowseModal) {
          setShowBrowseModal(false);
          setSelectedCard(null);
        }
      }
    };

    document.addEventListener("keydown", handleEscapeKey);
    return () => document.removeEventListener("keydown", handleEscapeKey);
  }, [showExitModal, showNewCardModal, showBrowseModal]);

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–≥–¥–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
  useEffect(() => {
    if (showExitModal || showNewCardModal || showBrowseModal) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "unset";
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      document.body.style.overflow = "unset";
    };
  }, [showExitModal, showNewCardModal, showBrowseModal]);

  const handleShowExitModal = () => {
    setShowExitModal(true);
  };

  const handleHideExitModal = () => {
    setShowExitModal(false);
  };

  const handleShowNewCardModal = () => {
    setShowNewCardModal(true);
  };

  const handleHideNewCardModal = () => {
    setShowNewCardModal(false);
  };

  const handleShowBrowseModal = (card) => {
    setSelectedCard(card);
    setShowBrowseModal(true);
  };

  const handleHideBrowseModal = () => {
    setShowBrowseModal(false);
    setSelectedCard(null);
  };

  const handleTaskCreated = () => {
    setShowNewCardModal(false);
  };

  const handleTaskUpdated = () => {
    setShowBrowseModal(false);
    setSelectedCard(null);
  };

  const handleTaskDeleted = () => {
    setShowBrowseModal(false);
    setSelectedCard(null);
  };

  const handleOverlayClick = (e) => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ø–æ —Ñ–æ–Ω—É, –∞ –Ω–µ –ø–æ —Å–∞–º–æ–º—É –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É
    if (e.target === e.currentTarget) {
      setShowExitModal(false);
    }
  };

  const handleExit = () => {
    logout();
    navigate("/login");
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSearch = (query) => {
    setSearchQuery(query);
  };

  const handleFilter = (filter) => {
    setSelectedFilter(filter);
  };

  const handleSort = (sort) => {
    setSelectedSort(sort);
  };

  const toggleStats = () => {
    setShowStats(!showStats);
  };

  return (
    <Wrapper>
      <PopUser />
      <PopNewCard
        isVisible={showNewCardModal}
        onClose={handleHideNewCardModal}
        onTaskCreated={handleTaskCreated}
      />
      <PopBrowse
        isVisible={showBrowseModal}
        onClose={handleHideBrowseModal}
        card={selectedCard}
        onTaskUpdated={handleTaskUpdated}
        onTaskDeleted={handleTaskDeleted}
      />
      <Header
        onShowExitModal={handleShowExitModal}
        onShowNewCardModal={handleShowNewCardModal}
        onSearch={handleSearch}
        onFilter={handleFilter}
        onSort={handleSort}
        searchQuery={searchQuery}
        selectedFilter={selectedFilter}
        selectedSort={selectedSort}
      />

      <Container>
        <StatsSection>
          <StatsToggleButton onClick={toggleStats}>
            {showStats ? "üîΩ –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" : "‚ñ∂Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"}
          </StatsToggleButton>
          {showStats && <StatsDashboard />}
        </StatsSection>
      </Container>

      <Main
        onCardClick={handleShowBrowseModal}
        searchQuery={searchQuery}
        selectedFilter={selectedFilter}
        selectedSort={selectedSort}
      />

      {showExitModal && (
        <ExitContainer onClick={handleOverlayClick}>
          <ExitModal>
            <ExitBlock>
              <ExitTitle>
                <h2>–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?</h2>
              </ExitTitle>
              <ExitText>
                <p>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?</p>
              </ExitText>
              <ExitButtons>
                <ExitButtonYes onClick={handleExit}>–î–∞, –≤—ã–π—Ç–∏</ExitButtonYes>
                <ExitButtonNo onClick={handleHideExitModal}>
                  –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è
                </ExitButtonNo>
              </ExitButtons>
            </ExitBlock>
          </ExitModal>
        </ExitContainer>
      )}
    </Wrapper>
  );
}

export default MainPage;
